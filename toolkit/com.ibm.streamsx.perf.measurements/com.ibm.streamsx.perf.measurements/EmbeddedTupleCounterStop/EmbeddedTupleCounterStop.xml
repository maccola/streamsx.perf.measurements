<?xml version="1.0" ?>
<!-- Copyright (C) 2015, International Business Machines Corporation  -->
<!-- All Rights Reserved                                              -->
<!--                                                                  -->
<operatorModel
  xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" 
  xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
      <description>
The `EmbeddedTupleCounterStop` operator that, used in conjunction
with the `EmbeddedTupleCounterStart` operator, can allow an
application to detect how many tuples are flowing through
an operator (or a set of operators).

The `EmbeddedTupleCounterStop` operator can also be connected
to more than 1 `EmbeddedTupleCounterStart` operators.  This can
be useful testing operator with multiple inputs (ie Join).  In that
case, when measuring, the timestamps coming from the input ports
will be compared and the earlier timestamp is the one that will
be used in the measurement.

It is important for users of this operator to understand the
concepts of Processing Elements (PEs) and fusion.  When measuring
the performance of an operator, the EmbeddedTupleCounterStart operator,
the EmbeddedTupleCounterStop operator, and the operator being measured
should all be placed in the same PE.  Often the `Blast` operator
will be used upstream from the EmbeddedTupleCounterStart operator as
well.  In this case, the Blast operator should be placed in the
same PE as well.

+ Examples

    composite Main {
      graph
        stream&lt;uint64 cnt, rstring name&gt; rawData = Custom() {
          logic
            onProcess: {
              uint64  numTuples = 10000000ul;
              mutable uint64 i = 0ul;
              while (i &lt; numTuples) {
                rstring nextName = "Name" + (rstring)i;
                submit({cnt = i, name = nextName}, rawData)
                i++;
              }
              submit(Sys.WindowMarker, rawData);
            }
          config placement: partitionColocation("A");         
        }
  
        // Buffer one million tuple into memory and blast
        // them through two thousand times.
        stream&lt;rawData&gt; blasted = Blast(rawData) {
          param
            loops : 2000ul;
            punctOnLoop  : true;
            maxTuples  : 1000000ul;
          config placement: partitionColocation("B");         
        }
 
        // Three start measurement intervals using 
        //TupleCount measurement mode to mark the intervals.
        (stream &lt;timestamp startTime&gt; start ; stream &lt;rawData&gt; blasted2) = EmbeddedTupleCounterStart(blasted) {  
          param
            measurementMode: TupleCount;
            tupleCount :     500000000ul;
            measurementIntervals : 3ul;
          config placement: partitionColocation("B");         
        }
 
        // Measuring the performance of this simple Functor 
        stream &lt;rawData&gt; processed = Functor(blasted2) {
          output processed:
            cnt = cnt * 2ul;
          config placement: partitionColocation("B");     
        }
  
        // Three stop measurement intervals using 
        //TupleCount measurement mode to mark the intervals.
        stream &lt;uint64 cnt, float64 duration, float64 rate, uint64 interval&gt; results = EmbeddedTupleCounterStop(start; processed) {
          param
            measurementMode      : TupleCount;
            tupleCount           : 500000000ul;
            measurementIntervals : 3ul;
          output results:
            interval = Interval(),
            cnt = Count(),
            duration = Duration(),
            rate = Rate();
          config placement: partitionColocation("B");  
        }  
  
        () as dumpResults= FileSink(results) {     
          param
            file : "output.csv";
            format: csv;    
            flush : 1u;
          config placement: partitionColocation("C");
        }
    }
      </description>
      <customLiterals>
        <enumeration>
          <name>Modes</name>
          <value>TupleCount</value>
          <value>PunctCount</value>
        </enumeration>
      </customLiterals>
      <customOutputFunctions>
        <customOutputFunction>
          <name>OutputOperations</name>
          <function>
            <description>Return the argument unchanged</description>
            <prototype><![CDATA[<any T> T Any(T v)]]></prototype>
          </function>
          <function>
            <description>Return the argument unchanged.  Include a custom header if includeHeaders parameter is true.</description>
            <prototype><![CDATA[rstring Any(rstring v, rstring description)]]></prototype>
          </function>
          <function>
            <description>Return the duration (seconds) of the interval.</description>
            <prototype><![CDATA[<any T> T Duration()]]></prototype>
          </function>
          <function>
            <description>Return the duration (seconds) of the interval.  
Include a custom header if includeHeaders parameter is true.
            </description>
            <prototype><![CDATA[rstring  Duration(rstring description)]]></prototype>
          </function>
          <function>
            <description>Return the tuple count of the interval.
            </description>
            <prototype><![CDATA[<any T> T Count()]]></prototype>
          </function>
          <function>
            <description>Return the tuple count of the interval.
Include a custom header if includeHeaders parameter is true.
            </description>
            <prototype><![CDATA[rstring  Count(rstring description)]]></prototype>
          </function>
          <function>
            <description>Return the tuple rate (tuples per second)</description>
            <prototype><![CDATA[<any T> T Rate()]]></prototype>
          </function>
          <function>
            <description>Return the tuple rate (tuples per second)
Include a custom header if includeHeaders parameter is true.
</description>
            <prototype><![CDATA[rstring  Rate(rstring description)]]></prototype>
          </function>
          <function>
            <description>Return the current interval (a counter).</description>
            <prototype><![CDATA[<any T> T Interval()]]></prototype>
          </function>
          <function>
            <description>Return the current interval (a counter).i
Include a custom header if includeHeaders parameter is true.
</description>
            <prototype><![CDATA[rstring  Interval(rstring description)]]></prototype>
          </function>
        </customOutputFunction>
      </customOutputFunctions>
      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
    </context>  
    <parameters>
      <allowAny>false</allowAny>
      <parameter>
        <name>measurementMode</name>
        <description>
Indicates what should trigger the start of a new measurement interval.
Valid values are `TupleCount` and `PunctCount`.

* `TupleCount`: Indicates that a certain number of tuples
being passed through the last
input port will indicate a new measurement interval.  If this
value is specified, then the tupleCount parameter must also be specified.
* `PunctCount`: Indicates that a certain number of puncuations
being passed therough the last input port
 will indicate a new measurement interval.
        </description>
        <optional>false</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>Modes</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tupleCount</name>
        <description>
Used in conjunction with the TupleCount measurement mode.  This
parameter value will indicate the number of tuples that need
to be passed through the last input ports
to indicate a new measurement
interval.  This parameter is required if the TupleCount
measurementMode parameter is specified.
        </description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>punctCount</name>
        <description>
Used in conjunction with the PunctCount measurement mode.
This parameter value will indicate the number of punctuations
that need to be passed through the last input port
to indicate a new measurement interval.  This value defaults to one if
not specified.
        </description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>measurementIntervals</name>
        <description>
Number of measurement intervals.  This value will
default to one.
        </description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>includeHeaders</name>
        <description>
If includeHeaders is set to true, attribute descriptions will
be placed in an extra tuple prior to the first tuple being output.
All attributes in the output stream must be of type rstring
if includeHeaders is true.  This value will default to false.
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>
The EmbeddedTupleCounterStop operator needs a minimum of two
input ports and can accept additional input ports.

The first input port should be connected to the operator that
is being measured. Tuples (or punctuations) coming into this operator
will be counted by the operator.

        </description>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>      
      <inputPortOpenSet>
        <description>
The remaining input ports 2 to N  are to be used to accept a tuple
from a stream output by the EmbeddedTupleCounterStart operator.
These input ports must contain only one attribute.  The attribute
must be of type rstring.
        </description>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
      </inputPortOpenSet>      
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>
The `EmbededTupleCounterStop` operator has one required output
port.  

The output port should contain measurement result data
using the output functions supplied within the operator.
        </description>
        <expressionMode>AttributeFree</expressionMode> 
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>false</rewriteAllowed>
        <outputFunctions>
        <default>Any</default>
        <type>OutputOperations</type>
        </outputFunctions>
        <windowPunctuationOutputMode>Free</windowPunctuationOutputMode>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>          
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
