/*******************************************************************************/
/* Copyright (C) 2016, International Business Machines Corporation             */
/* All Rights Reserved                                                         */
/*******************************************************************************/

/* Additional includes go here */

<%

  use EmbeddedTupleCounterStartCommon;
  my ($mode, $tupleCount, $punctCount, $measurementIntervals) = EmbeddedTupleCounterStartCommon::getParms($model);
%>    

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

  // Notify port readiness
  void allPortsReady(); 

  // Notify pending shutdown
  void prepareToShutdown(); 

  // Processing for source and threaded operators   
  void process(uint32_t idx);
    
  // Tuple processing for mutating ports 
  void process(Tuple & tuple, uint32_t port);
    
  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  // Punctuation processing
  void process(Punctuation const & punct, uint32_t port);
private:
  // Members
  Mutex              processMutex;
  const SPL::uint64  MAX_INTERVAL_COUNT;
  SPL::uint64        currentIntervalCount;
  SPL::boolean       newInterval;
<%
if ($mode eq "TupleCount") {
%>
  const SPL::uint64  MAX_TUPLE_COUNT;
  SPL::uint64        currentTupleCount; 
<%
}
else {
%>
  const SPL::uint64  MAX_PUNCT_COUNT;
  SPL::uint64        currentPunctCount; 
<%
}
%>
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

